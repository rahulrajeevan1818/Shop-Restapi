swagger: "2.0"
info:
  title: Shop API
  description: This is api testing
  version: 1.0
  contact:
    email: rahul.rajeevan@spericorn.com
  liscence:
    name: Apache 2.0
    url: "https://www.apache.org/liscences/LIS"
  servers:
    -url: https://localhost:3000
    description: This is local server
    -url: https://spericorn.com/
    description: This is orginal URL
schemes: [http, https] 
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header 

paths: 

# Register
  /api/register:
    post:
      tags: 
        - Authentication
      security:
        - Bearer: []          
      summary: Signup for user
      description: 
      operationId: signup
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
      - in: body
        name: body
        description: signup for users
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email: 
              type: string
            password:
              type: string        
      responses:
        200:
          description: OK

# Login          
  /api/login:
    post: 
      tags:
        - Authentication
      security:
        - Bearer: []          
      summary: Login for user after register  
      parameters:
        - in: body
          name: user
          schema:
            type: body
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: OK

# Forgot password
  /api/password/forgot:
    post:
      tags:
        - Authentication
      security:
        - Bearer: []
      summary: Forgot password
      parameters:
        - in: body
          name: user
          schema: 
            type: object
            properties:
              email:
                type: string
      responses: 
        200:
          description: OK              
# reset password
  /api/password/reset/{token}: 
    put: 
      security:
        - Bearer: [] 
      tags:
        - Authentication
      summary: reset password
      description: resetpassword
      operationId: resetpassword
      produces:
      - application/xml
      - application/json
      parameters:
        - in: path
          name: token
          description: token provided by email link through   (click the link and copy id form url)
          required: true
          schema:
            type: object
            properties:
              token:    
                type: string          
        - in: body
          name: body
          description: enter your new password
          required: on
          schema:
            type: object
            properties:   
              password:
                type: string
              confirmPassword:
                type: string  
      requestBody: 
        description: request body  
        content:
          application/json:
            schema:
              type: object
              properties:   
                password:
                  type: string
                confirmPassword:
                  type: string 

          responses:
            200:
              description: OK                

# Logout
  /api/logout:
    get:
      tags:
        - Authentication
      security:
        - Bearer: []  
      summary: Logout user
      responses:
        200:
          description: OK  

# my profile
  /api/me: 
    get:
      tags: 
        - User
      security:
        - Bearer: []
      summary: view your profile  
      responses:
        200:
          description: OK    

# update my profile
  /api/me/update:
    put:
      tags: 
        - User
      security:
        - Bearer: []          
      summary: Update profile
      description: 
      operationId: update
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
      - in: body
        name: body
        description: update your profile
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email: 
              type: string      
      responses:
        200:
          description: OK           

# update or change password
  /api/password/update:
    put:
      tags: 
        - User
      security:
        - Bearer: []          
      summary: Update password after login
      description: 
      operationId: update
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
      - in: body
        name: body
        description: update your password
        required: true
        schema:
          type: object
          properties:
            oldPassword:
              type: string
            newPassword: 
              type: string 
            confirmPassword: 
              type: string                    
      responses:
        200:
          description: OK    

# update role 
  /api/admin/user/{id}:
    put: 
      security:
        - Bearer: [] 
      tags:
        - Admin
      summary: update role
      description: update role
      operationId: update role
      produces:
      - application/xml
      - application/json
      parameters:
        - in: path
          name: id
          description: token provided by email link through   (click the link and copy id form url)
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string          
        - in: body
          name: body
          description: enter your new password
          required: on
          schema:
            type: object
            properties:   
              role:
                type: string
              email:
                type: string  
              name:
                type: string                  
      requestBody: 
        description: request body  
        content:
          application/json:
            schema:
              type: object
              properties:   
              role:
                type: string
              email:
                type: string  
              name:
                type: string   

          responses:
            200:
              description: OK   

# view single user
    get:
      tags: 
        - Admin
      security:
        - Bearer: []
      summary: view single user
      parameters:
        - in: path
          name: id
          description: id
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string        
      responses:
        200:
          description: OK  

# delete single user
    delete:
      tags: 
        - Admin
      security:
        - Bearer: []
      summary: delete single user
      parameters:
        - in: path
          name: id
          description: id
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string        
      responses:
        200:
          description: OK  

# view all users
  /api/admin/users: 
    get:
      tags: 
        - Admin
      security:
        - Bearer: []
      summary: view all users  
      responses:
        200:
          description: OK  

# add new product
  /api/admin/product/new:
    post:
      tags:
        - Product
      security:
        - Bearer: []
      # consumes:
      # - "multipart/form-data"
      # produces:
      # - "application/json"        
      summary: Add new product
      parameters:
        - in: body
          name: user
          schema: 
            type: object
            properties:
              name:
                type: string
              price:
                type: integer
                format: int64
              description:
                type: string
              category: 
                type: string
        # - name: "file"
        #   in: "formData"
        #   description: "file to upload"
        #   required: false
        #   type: "file"        
      responses: 
        200:
          description: OK       

# view all products   
  /api/products: 
    get:
      tags: 
        - Product
      security:
        - Bearer: []
      summary: view all products 
      parameters:       
        - in: query
          name: page
          type: integer
          description: page of list  
        - in: query
          name: keyword
          type: string
          description: type any keyword for search  
        - in: query
          name: limit
          type: integer
          description: number of items in a page  
        - in: query
          name: category
          type: string
          description: category of product  
        - in: query
          name: price[gt]
          type: integer
          description: price (>)  
        - in: query
          name: price[lt]
          type: integer
          description: price (<)                                                                    
      responses:
        200:
          description: OK   

# view single product
  /api/product/{id}:
    get:
      tags: 
        - Product
      security:
        - Bearer: []
      summary: view single product
      parameters:
        - in: path
          name: id
          description: id of a product
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string        
      responses:
        200:
          description: OK    

# update product
  /api/admin/product/{id}:
    put: 
      security:
        - Bearer: [] 
      tags:
        - Product
      summary: update product details
      description: update product details
      operationId: update product details
      produces:
      - application/xml
      - application/json
      parameters:
        - in: path
          name: id
          description: id of product
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string          
        - in: body
          name: body
          description: enter product details
          required: on
          schema:
            type: object
            properties:   
              name:
                type: string
              description:
                type: string  
              price:
                type: integer
              category: 
                type: string   
# image       
      requestBody: 
        description: request body  
        content:
          application/json:
            schema:
              type: object
              properties:   
              name:
                type: string
              description:
                type: string  
              price:
                type: integer
              category: 
                type: string   

          responses:
            200:
              description: OK   

# add product review
  /api/review:
    put: 
      security:
        - Bearer: [] 
      tags:
        - Product
      summary: add product review or ratings
      description: add product review or ratings
      operationId: add product review or ratings
      produces:
      - application/xml
      - application/json
      parameters:        
        - in: body
          name: body
          description: enter something
          required: on
          schema:
            type: object
            properties:   
              productId:
                type: string
              comment:
                type: string  
              rating:
                type: integer       
      requestBody: 
        description: request body  
        content:
          application/json:
            schema:
              type: object
              properties:   
              productId:
                type: string
              comment:
                type: string  
              rating:
                type: integer  
          responses:
            200:
              description: OK   

# view product ratings
  /api/reviews:
    get:
      tags: 
        - Product
      security:
        - Bearer: []
      summary: view product rating
      parameters:
        - in: query
          name: id
          description: id
          required: true     
      responses:
        200:
          description: OK  

# delete product ratings
    delete:
      tags: 
        - Product
      security:
        - Bearer: []
      summary: delete product rating
      parameters:
        - in: query
          name: productId
          description: product id
          required: true 
        - in: query
          name: id
          description: reveiw id
          required: true               
      responses:
        200:
          description: OK            

# add new order
  /api/order/new:
    post:
      tags:
        - Order
      security:
        - Bearer: []      
      summary: Add new order
      parameters:
        - in: body
          name: order
          schema: 
            type: object
            properties:
              itemPrice:
                type: integer
                format: int64
              taxPrice:
                type: integer
                format: int64
              shippingPrice:
                type: integer
                format: int64
              totalPrice: 
                type: integer
                format: int64
              orderStatus: 
                type: string 
                enum: ["processing","pending","delivered"]   

            orderItems:
              type: array
              items:
                type: object
                properties:
                  product: 
                    type: string
                  name: 
                    type: name                     
                  price:
                    type: integer
                    format: int64   
                  image:
                    type: string
                  quantity:
                    type: integer
                    format: int64 

            shippingInfo:
              type: array
              items:
                type: object
                properties:                                          
                  address: 
                    type: string
                  city: 
                    type: string                     
                  state:
                    type: string 
                  country:
                    type: string
                  pincode:
                    type: integer
                    format: int64     
                  phno:
                    type: integer
                    format: int64  

            paymentInfo:
              type: array
              items:
                type: object
                properties:   
                  id: 
                    type: string
                  status: 
                    type: string  
                    enum: ["succeeded","failed"] 
      responses: 
        200:
          description: OK       
                       
# my orders
  /api/orders/me: 
    get:
      tags: 
        - Order
      security:
        - Bearer: []
      summary: my orders
      responses:
        200:
          description: OK  

# get all orders
  /api/admin/orders: 
    get:
      tags: 
        - Order
      security:
        - Bearer: []
      summary: all orders
      responses:
        200:
          description: OK   

# get single orders
  /api/order/{id}: 
    get:
      tags: 
        - Order
      security:
        - Bearer: []
      summary: view single order 
      parameters:
        - in: path
          name: id
          description: id of a order
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string        
      responses:
        200:
          description: OK   

# delete order
  /api/admin/order/{id}:
    delete:
      tags: 
        - Order
      security:
        - Bearer: []
      summary: delete order
      parameters:
        - in: path
          name: id
          description: id
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string        
      responses:
        200:
          description: OK  

# update order status

    put:
      tags: 
        - Order
      security:
        - Bearer: []
      summary: update order status
      parameters:
        - in: path
          name: id
          description: id
          required: true
          schema:
            type: object
            properties:
              id:    
                type: string  
        - in: body
          name: body
          description: enter your new password
          required: on
          schema:
            type: object
            properties:   
              status:
                type: string                
      requestBody: 
        description: request body  
        content:
          application/json:
            schema:
              type: object
              properties:   
              status:
                type: string  

          responses:
            200:
              description: OK                        
      responses:
        200:
          description: OK            
